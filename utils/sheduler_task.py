import logging

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import requests as rq
from database.models import Order
from datetime import datetime, timedelta
import asyncio


async def scheduler_feedback(bot: Bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–ª–∞
    :return:
    """
    logging.info(f'scheduler_feedback')
    orders = await rq.get_orders()
    date_format = '%d/%m/%Y %H:%M:%S'
    current_date = datetime.now().strftime(date_format)
    for order in orders:
        if order.feedback == 'remember':
            delta_time = (datetime.strptime(current_date, date_format) -
                          datetime.strptime(order.datetime_order, date_format) + timedelta(days=1))
            # –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–æ
            if delta_time.days > 0:
                try:
                    button_1 = InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data=f'leave_feedback')
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1]], )
                    await bot.send_message(chat_id=order.tg_id,
                                           text='–ü—Ä–∏–≤–µ—Ç!\n'
                                                '–¢–µ–±–µ —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?üòª\n\n'
                                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤! –ê –º—ã –¥–∞–¥–∏–º —Ç–µ–±–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 20%'
                                                ' –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ üòé\n\n'
                                                '–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n'
                                                'üì±<a href="https://yandex.ru/maps/-/CHfYVZNS">–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</a>\n'
                                                'üìç<a href="">2–ì–ò–°</a>\n'
                                                'üì±Google.–ö–∞—Ä—Ç—ã\n'
                                                'üì±<a href="https://www.instagram.com/tvoiystart">Instagram</a>\n'
                                                'üì±<a href="https://vk.com/tvoiystart">VK</a>\n'
                                                'üì±<a href="https://t.me/tvoiystart">Telegram</a>',
                                           reply_markup=keyboard)
                    await rq.set_order_feedback(id_order=order.id, feedback='feedback')
                except:
                    pass


async def scheduler_remember(bot: Bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–ª–∞
    :return:
    """
    logging.info(f'scheduler_remember')
    orders: list[Order] = await rq.get_orders()
    date_format = '%d/%m/%Y %H:%M:%S'
    current_date = datetime.now().strftime(date_format)
    for order in orders:
        if order.feedback == 'create':
            delta_time = (datetime.strptime(order.datetime_order, date_format) -
                          datetime.strptime(current_date, date_format) - timedelta(hours=2))
            # –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            if delta_time.days < 0:
                try:
                    await bot.send_message(chat_id=order.tg_id,
                                           text=f'–ü—Ä–∏–≤–µ—Ç!\n'
                                                f'–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Ç—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞):\n'
                                                f'–ó–∞–ª: {order.title_object}.\n'
                                                f'–î–∞—Ç–∞ {order.date_order} {order.month_order}\n'
                                                f'–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:{order.time_order}\n'
                                                f'–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞: {order.finish_date_order.split()[-1]}\n\n'
                                                f'<b>–ù–µ –∑–∞–±—É–¥—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥-–¥–æ—Å—Ç—É–ø–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
                                                f' –µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞–º –≤–º–µ—Å—Ç–µ —Å –ø–∞–º—è—Ç–∫–æ–π!</b>\n'
                                                f'–ñ–¥–µ–º —Ç–µ–±—èü§©')
                    await rq.set_order_feedback(id_order=order.id, feedback='remember')
                except:
                    pass


if __name__ == "__main__":
    asyncio.run(scheduler_feedback())
