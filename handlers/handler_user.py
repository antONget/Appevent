from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config_data.config import Config, load_config
import database.requests as rq
import keyboards.keyboard_user as kb
from utils.admin_utils import send_admins

import logging
import asyncio
import random

router = Router()
config: Config = load_config()


class User(StatesGroup):
    number_order = State()
    feed_back = State()


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/start"
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_start_command {message.chat.id}")
    await state.set_state(state=None)
    if not message.from_user.username:
        username = 'None'
    else:
        username = message.from_user.username
    await rq.add_user(tg_id=message.chat.id,
                      data={"tg_id": message.chat.id, "username": username})
    admins = config.tg_bot.admin_ids.split(',')
    if str(message.chat.id) in admins:
        await message.answer(text=f'–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.\n'
                                  f'–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤',
                             reply_markup=kb.keyboard_start_admin())
    else:
        await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –¢–≤–æ–π START!üí´\n\n'
                                  f'–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ó–¥–µ—Å—å –Ω–∞–π–¥—É—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n'
                                  f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞'
                                  f' (–æ–Ω –ø—Ä–∏—à–µ–ª –∫ —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É –≤–º–µ—Å—Ç–µ —Å–æ —Å—á–µ—Ç–æ–º)üëÄ',
                             reply_markup=kb.keyboard_start_user())


@router.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def process_support(message: Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –ü–û–î–î–ï–†–ñ–ö–ê
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_support {message.chat.id}")
    await state.set_state(state=None)
    await message.answer(text='–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º!\n'
                              '@tvoiystart_admin')


@router.message(F.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
async def process_manual(message: Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –ü–û–î–î–ï–†–ñ–ö–ê
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_support {message.chat.id}")
    await state.set_state(state=None)
    await message.answer(text='–°–∏—Å—Ç–µ–º–∞ –¢–≤–æ–π START —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n\n'
                              '–ù–æ —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø—É—Ç–∞–ª—Å—è, –º—ã —Å–¥–µ–ª–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n'
                              '–°–∫–æ—Ä–µ–µ —Å–º–æ—Ç—Ä–∏üëÄ',
                         reply_markup=kb.keyboard_question())


@router.callback_query(F.data.startswith('question'))
async def get_answer(callback: CallbackQuery):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    :param callback:
    :return:
    """
    answer = callback.data.split('_')[1]
    if answer == '1':
        await callback.message.answer(text='–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 1')
    elif answer == '2':
        await callback.message.answer(text='–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 2')
    elif answer == '3':
        await callback.message.answer(text='–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 3')
    elif answer == '4':
        await callback.message.answer(text='–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 4')
    elif answer == '5':
        await callback.message.answer(text='–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 5')
    await asyncio.sleep(2)
    await process_support(message=callback.message)


@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞')
async def process_get_password(message: Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_get_password {message.chat.id}")
    await state.set_state(state=None)
    await message.answer(text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–æ–Ω –ø—Ä–∏—à–µ–ª —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É'
                              ' –≤–º–µ—Å—Ç–µ —Å–æ —Å—á–µ—Ç–æ–º)üëÄ')
    await state.set_state(User.number_order)


@router.message(F.text, StateFilter(User.number_order))
async def get_number_order(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_number_order {message.chat.id}')
    number_order = message.text
    order = await rq.get_order_number(number_order=number_order)
    if order:
        title_object = order.title_object
        object_order = await rq.get_object_title(title=title_object)
        if object_order:
            await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {order.name_client}\n"
                                      f"–í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ {title_object}\n"
                                      f"–î–∞—Ç–∞ –±—Ä–æ–Ω–∏: {order.date_order} {order.month_order}\n"
                                      f"–í—Ä–µ–º—è –±—Ä–æ–Ω–∏: {order.time_order}\n\n"
                                      f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç: {object_order.password_object}")
            # await message.answer_video(video=object_order.video_object,
            #                            caption='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –æ–±—ä–µ–∫—Ç–∞')
            user_info = await rq.get_user(tg_id=message.chat.id)
            order_user = user_info.list_order.split(',')
            order_user.append(str(order.id))
            await rq.set_order_user(tg_id=message.chat.id, orders=','.join(order_user))
            await rq.set_order_tg_id(tg_id=message.chat.id, id_order=order.id)
        else:
            await message.answer(text='–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê\n\n'
                                      '–ü—Ä–æ–≤–µ—Ä—å 2 –≤–µ—â–∏:\n'
                                      '1. –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω? –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞'
                                      ' –∏ –ø–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥!\n\n'
                                      '2. –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω? –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑.'
                                      ' –°—á–µ—Ç —É–∂–µ —É —Ç–µ–±—è –Ω–∞ –ø–æ—á—Ç–µüòä\n\n'
                                      '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º: @tvoiystart_admin')
            await send_admins(bot=bot, text=f'–û–±—ä–µ–∫—Ç {title_object} –≤ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        await state.set_state(state=None)
    else:
        await message.answer(text='–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üßê\n\n'
                                  '–ü—Ä–æ–≤–µ—Ä—å 2 –≤–µ—â–∏:\n'
                                  '1. –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω? –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞'
                                  ' –∏ –ø–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥!\n\n'
                                  '2. –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω? –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑.'
                                  ' –°—á–µ—Ç —É–∂–µ —É —Ç–µ–±—è –Ω–∞ –ø–æ—á—Ç–µüòä\n\n'
                                  '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º: @tvoiystart_admin')
        await state.set_state(state=None)


@router.message(F.text == '–û—Ç–∑—ã–≤—ã')
async def process_feedback(message: Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä –û–¢–ó–´–í–´
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_feedback {message.chat.id}")
    await state.set_state(state=None)
    await message.answer(text='–û–π, –∫–∞–∫ –∫—Ä—É—Ç–æ!ü§ó\n\n'
                              '–¢—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?\n'
                              '–ò–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –¥—Ä—É–≥–∏–µ?',
                         reply_markup=kb.keyboard_feedback())


@router.callback_query(F.data == 'show_feedback')
async def show_feedback(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
    :param callback:
    :return:
    """
    logging.info(f"show_feedback {callback.message.chat.id}")
    await callback.message.answer(text=f'–û—Ç–∑—ã–≤—ã –æ –¢–≤–æ–π START:\n\n'
                                       f'–ù–∞ –∫–∞—Ä—Ç–∞—Ö:\n'
                                       f'–í Instagram:')


@router.callback_query(F.data == 'leave_feedback')
async def leave_feedback(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
    :param callback:
    :return:
    """
    logging.info(f"leave_feedback {callback.message.chat.id}")
    await callback.message.answer(text=f'–ú—ã –æ—á–µ–Ω—å –ª—é–±–∏–º —Å–ª—É—à–∞—Ç—å –æ —Å–µ–±–µ, –ø–æ—ç—Ç–æ–º—É –∑–∞ –æ—Ç–∑—ã–≤ –º—ã –¥–∞–µ–º —Å–∫–∏–¥–∫–∏!üòé\n\n'
                                       f'–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 20% –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ?\n'
                                       f'–û—Ç–º–µ—Ç—å –Ω–∞—Å –≤ Instagram –∏–ª–∏ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ –∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –≤ –¥–∏—Ä–µ–∫—Ç/–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n'
                                       f'–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø—Ä–æ–º–æ–∫–æ–¥!\n\n'
                                       f'–ù–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n'
                                       f'Instagram: https://www.instagram.com/tvoiystart\n'
                                       f'–í–∫–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/tvoiystart\n'
                                       f'Telegram: https://t.me/tvoiystart\n'
                                       f'–ö–∞—Ä—Ç—ã:\n\n'
                                       f'–ê –µ—â–µ —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å, –≤—Å–µ, —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                                       f' —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏–º!')
    await state.set_state(User.feed_back)


@router.message(StateFilter(User.feed_back), or_f(F.document, F.photo, F.video))
async def get_feed_back(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_feed_back {message.chat.id}')
    await asyncio.sleep(random.random())
    data = await state.get_data()
    list_content = data.get('content', [])
    count = data.get('count', [])
    if message.text:
        await message.answer(text=f'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    elif message.photo:
        content = message.photo[-1].file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.video:
        content = message.video.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    elif message.document:
        content = message.document.file_id
        if message.caption:
            caption = message.caption
        else:
            caption = 'None'
        await state.update_data(caption=caption)

    list_content.append(content)
    count.append(content)
    await state.update_data(content=list_content)
    await state.update_data(count=count)
    await state.set_state(state=None)
    if len(count) == 1:
        await message.answer(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?',
                             reply_markup=kb.keyboard_send())


@router.callback_query(F.data.endswith('content'))
async def send_add_content(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'send_add_content {callback.message.chat.id}')
    answer = callback.data.split('_')[0]
    if answer == 'add':
        await state.set_state(User.content_state)
        await state.update_data(count=[])
        await callback.message.edit_text(text='üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
    else:
        await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ! –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≤–æ–µ–º—É –æ—Ç–∑—ã–≤—É –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!',
                                         reply_markup=None)

        data = await state.get_data()
        content = data['content']

        for admin in config.tg_bot.admin_ids.split(','):
            try:
                for item in content:
                    try:
                        await bot.send_photo(chat_id=admin,
                                             photo=item)
                    except:
                        try:
                            await bot.send_video(chat_id=admin,
                                                 video=item)
                        except:
                            await bot.send_document(chat_id=admin,
                                                    document=item)
            except:
                await bot.send_message(chat_id=admin,
                                       text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç')
        await state.set_state(state=None)

